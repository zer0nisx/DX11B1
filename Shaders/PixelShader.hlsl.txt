struct PixelInput
{
    float4 position : SV_POSITION;
    float3 normal : NORMAL;
    float2 texCoord : TEXCOORD0;
    float3 worldPos : WORLD_POSITION;
};

cbuffer LightBuffer : register(b1)
{
    float3 lightDirection;
    float lightIntensity;
    float3 lightColor;
    float ambientIntensity;
    float3 cameraPosition;
    float specularPower;
};

Texture2D diffuseTexture : register(t0);
SamplerState textureSampler : register(s0);

float4 main(PixelInput input) : SV_TARGET
{
    // Sample diffuse texture
    float4 textureColor = diffuseTexture.Sample(textureSampler, input.texCoord);

    // Normalize the normal
    float3 normal = normalize(input.normal);

    // Calculate ambient lighting
    float3 ambient = lightColor * ambientIntensity;

    // Calculate diffuse lighting
    float3 lightDir = normalize(-lightDirection);
    float diffuseFactor = max(dot(normal, lightDir), 0.0f);
    float3 diffuse = lightColor * lightIntensity * diffuseFactor;

    // Calculate specular lighting
    float3 viewDirection = normalize(cameraPosition - input.worldPos);
    float3 reflectDirection = reflect(-lightDir, normal);
    float specularFactor = pow(max(dot(viewDirection, reflectDirection), 0.0f), specularPower);
    float3 specular = lightColor * specularFactor;

    // Combine lighting
    float3 finalColor = textureColor.rgb * (ambient + diffuse) + specular;

    return float4(finalColor, textureColor.a);
}
